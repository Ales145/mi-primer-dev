---
interface Props {
    placeholder?: string;
    className?: string;
}

const { placeholder = "Buscar...", className = "" } = Astro.props;
---

<div class={`search-autocomplete relative ${className}`}>
    <input 
        type="search" 
        placeholder={placeholder}
        class="w-full px-4 py-2 pl-10 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
        id="search-input"
    />
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
    </svg>
    <div class="absolute w-full mt-1 bg-white rounded-lg shadow-lg border border-gray-100 hidden" id="search-results">
        <!-- Results will be populated here -->
    </div>
</div>

<script>
    let debounceTimer: ReturnType<typeof setTimeout>;
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const searchResults = document.getElementById('search-results');

    if (searchInput && searchResults) {
        searchInput.addEventListener('input', (e) => {
            clearTimeout(debounceTimer);
            const value = (e.target as HTMLInputElement).value;
            
            debounceTimer = setTimeout(async () => {
                if (value.length < 2) {
                    searchResults.classList.add('hidden');
                    return;
                }

                try {
                    const response = await fetch(`/api/search?q=${encodeURIComponent(value)}`);
                    const data = await response.json();

                    if (data.results.length > 0) {
                        searchResults.innerHTML = data.results
                            .map((result: any) => `
                                <a href="/actrices/${result.slug}" 
                                   class="flex items-center gap-3 p-3 hover:bg-gray-50 transition-colors">
                                    <img src="${result.image}" 
                                         alt="${result.name}" 
                                         class="w-10 h-10 rounded-full object-cover">
                                    <div>
                                        <div class="font-medium text-gray-900">${result.name}</div>
                                        <div class="text-sm text-gray-500">${result.birthPlace.split(',')[0]}</div>
                                    </div>
                                </a>
                            `)
                            .join('');
                        searchResults.classList.remove('hidden');
                    } else {
                        searchResults.innerHTML = `
                            <div class="p-3 text-gray-500 text-center">
                                No se encontraron resultados
                            </div>
                        `;
                        searchResults.classList.remove('hidden');
                    }
                } catch (error) {
                    console.error('Error searching:', error);
                }
            }, 300);
        });

        // Cerrar resultados al hacer clic fuera
        document.addEventListener('click', (e) => {
            if (!searchInput.contains(e.target as Node) && !searchResults.contains(e.target as Node)) {
                searchResults.classList.add('hidden');
            }
        });

        // Mostrar resultados al hacer foco
        searchInput.addEventListener('focus', () => {
            if (searchInput.value.length >= 2) {
                searchResults.classList.remove('hidden');
            }
        });
    }
</script>
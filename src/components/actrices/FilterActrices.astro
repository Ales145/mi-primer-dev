---
interface Props {
  class?: string;
  currentOrderBy?: string;
  featured?: boolean;
}

const { class: className, currentOrderBy = '', featured = false } = Astro.props;

const orderOptions = [
  { value: 'name-asc', label: 'Nombre (A-Z)' },
  { value: 'name-desc', label: 'Nombre (Z-A)' },
  { value: 'date-asc', label: 'Edad (Menor a Mayor)' },
  { value: 'date-desc', label: 'Edad (Mayor a Menor)' }
];
---

<div class:list={['filters-container', className]}>
  <div class="filter-group">
    <label for="orderBy">Ordenar por:</label>
    <select id="orderBy" name="orderBy" class="filter-select">
      <option value="">Seleccionar...</option>
      {
        orderOptions.map(({ value, label }) => (
          <option value={value} selected={currentOrderBy === value}>
            {label}
          </option>
        ))
      }
    </select>
  </div>

  <div class="filter-group">
    <label class="checkbox-label">
      <input
        type="checkbox"
        name="featured"
        id="featured"
        checked={featured}
      />
      Solo destacadas
    </label>
  </div>
</div>

<script>
  const orderSelect = document.getElementById('orderBy') as HTMLSelectElement;
  const featuredCheckbox = document.getElementById('featured') as HTMLInputElement;

  function updateFilters() {
    const url = new URL(window.location.href);
    
    if (orderSelect.value) {
      url.searchParams.set('orderBy', orderSelect.value);
    } else {
      url.searchParams.delete('orderBy');
    }
    
    if (featuredCheckbox.checked) {
      url.searchParams.set('featured', 'true');
    } else {
      url.searchParams.delete('featured');
    }

    // Mantener el parámetro de página si existe
    const page = url.searchParams.get('page');
    if (page && page !== '1') {
      url.searchParams.set('page', '1'); // Reset a primera página al filtrar
    }

    window.location.href = url.toString();
  }

  orderSelect?.addEventListener('change', updateFilters);
  featuredCheckbox?.addEventListener('change', updateFilters);
</script>

<style>
  .filters-container {
    display: flex;
    gap: 20px;
    align-items: center;
    padding: 16px;
    background: #f5f5f5;
    border-radius: 8px;
    margin-bottom: 20px;
  }

  .filter-group {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .filter-select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    min-width: 200px;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
  }

  .checkbox-label input[type="checkbox"] {
    width: 18px;
    height: 18px;
    cursor: pointer;
  }

  @media (max-width: 768px) {
    .filters-container {
      flex-direction: column;
      align-items: stretch;
    }

    .filter-select {
      width: 100%;
    }
  }
</style>
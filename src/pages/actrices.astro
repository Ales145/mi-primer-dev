---
import Layout from "../layouts/Layout.astro";
import SearchActrices from "../components/actrices/SearchActrices.astro";
import FilterActrices from "../components/actrices/FilterActrices.astro";

// La URL de la API
const API_URL = 'https://ensalud.info/generator/api-actriz.php';

interface Actriz {
  id: string;
  name: string;
  slug: string;
  image: string;
  bio: string;
  birthDate: string;
  birthPlace: string;
  height: string;
  featured: boolean;
}

// Get URL parameters
const url = Astro.url;
const searchQuery = url.searchParams.get('q') || '';
const orderBy = url.searchParams.get('orderBy') || '';
const featured = url.searchParams.get('featured') === 'true';
const pageParam = Number(url.searchParams.get('page')) || 1;

// Get actresses based on search or filters
let actrices: Actriz[] = [];

try {
  const params = new URLSearchParams();
  
  if (searchQuery) {
    // Búsqueda
    params.append('action', 'search');
    params.append('q', searchQuery);
  } else {
    // Listado con filtros
    params.append('action', 'all');
  }

  // Agregar parámetros de filtrado y paginación
  if (orderBy) params.append('order', orderBy);
  if (featured) params.append('featured', 'true');
  params.append('page', pageParam.toString());
  params.append('per_page', '12');

  console.log('API URL:', `${API_URL}?${params.toString()}`); // Para debug

  const response = await fetch(`${API_URL}?${params.toString()}`);
  if (!response.ok) throw new Error(`Error ${response.status}`);
  const data = await response.json();
  
  if (data.success) {
    actrices = data.data;
  } else {
    throw new Error(data.error || 'Error desconocido');
  }
} catch (error) {
  console.error('Error:', error);
  actrices = [];
}

// Usamos los datos de paginación de la API
const totalItems = actrices.length; // Deberíamos obtener esto de la API
const itemsPerPage = 12;
const totalPages = Math.ceil(totalItems / itemsPerPage);
const paginatedActrices = actrices; // La API ya nos da los resultados paginados
---

<Layout 
    title="Explorar Actrices | ActricesDB" 
    description="Explora nuestra colección de perfiles de las actrices más talentosas del cine y la televisión." 
    keywords="actrices, cine, televisión, películas, series, biografías, perfiles"
>
    <main class="min-h-screen bg-white">
        <!-- Hero Section -->
        <section class="bg-gradient-to-br from-purple-900 to-purple-700 text-white py-16">
            <div class="max-w-[1200px] mx-auto px-4">
                <div class="max-w-2xl">
                    <h1 class="text-4xl font-bold mb-4">Descubre Actrices</h1>
                    <p class="text-lg text-purple-100">
                        Explora los perfiles y trayectorias de las mejores actrices del cine.
                    </p>
                </div>
            </div>
        </section>

        <!-- Main Content -->
        <section class="max-w-[1200px] mx-auto px-4 py-8">
                <!-- Search and Filters -->
            <div class="flex flex-col sm:flex-row gap-4 items-center justify-between mb-8">
                <form id="search-form" class="w-full sm:w-[300px]">
                    <input
                        type="text"
                        id="search-input"
                        placeholder="Buscar actrices..."
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        value={searchQuery}
                    />
                </form>
                <div class="w-full sm:w-auto flex gap-4 items-center">
                    <select
                        id="order-select"
                        class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        value={orderBy}
                    >
                        <option value="">Ordenar por</option>
                        <option value="name_asc">Nombre (A-Z)</option>
                        <option value="name_desc">Nombre (Z-A)</option>
                        <option value="date_asc">Fecha (Antigua-Nueva)</option>
                        <option value="date_desc">Fecha (Nueva-Antigua)</option>
                    </select>
                    <label class="flex items-center gap-2">
                        <input
                            type="checkbox"
                            id="featured-checkbox"
                            class="w-4 h-4 text-purple-600"
                            checked={featured}
                        />
                        <span class="text-sm">Destacadas</span>
                    </label>
                </div>
            </div>

            <!-- Results Summary -->
            <div class="mb-6 flex justify-between items-center">
                <p class="text-gray-600">
                    {actrices.length} resultados {searchQuery && `para "${searchQuery}"`}
                </p>
                {(orderBy || featured || searchQuery) && (
                    <button 
                        class="text-sm text-purple-600 hover:text-purple-800"
                        onclick="clearAllFilters()"
                    >
                        Limpiar filtros
                    </button>
                )}
            </div>

            <!-- Grid de Actrices -->
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                {paginatedActrices.map((actriz: Actriz) => (
                    <article class="group">
                        <a href={`/actrices/${actriz.slug}`} class="block">
                            <div class="relative overflow-hidden rounded-lg aspect-[3/4]">
                                <img 
                                    src={actriz.image} 
                                    alt={actriz.name}
                                    class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                                />
                                <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                    <div class="absolute bottom-3 left-3 right-3 text-white">
                                        <p class="text-sm">{actriz.birthDate}</p>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3">
                                <h2 class="font-medium text-gray-900">{actriz.name}</h2>
                                <p class="text-sm text-gray-500 mt-1 line-clamp-1">{actriz.birthPlace.split(',')[0]}</p>
                            </div>
                        </a>
                    </article>
                ))}
            </div>

            <!-- Pagination -->
            {totalPages > 1 && (
                <div class="mt-12">
                    <div class="flex items-center justify-between">
                        <p class="text-sm text-gray-700">
                            Página <span class="font-medium">{pageParam}</span> de <span class="font-medium">{totalPages}</span>
                            {" "}({actrices.length} resultados)
                        </p>
                        <div class="flex gap-2">
                            <button
                                class={`pagination-button px-4 py-2 text-sm rounded-lg transition-colors ${pageParam <= 1 
                                    ? 'text-gray-400 cursor-not-allowed' 
                                    : 'text-purple-600 hover:bg-purple-50'}`}
                                disabled={pageParam <= 1}
                                data-page={pageParam - 1}
                            >
                                ← Anterior
                            </button>
                            <button
                                class={`pagination-button px-4 py-2 text-sm rounded-lg transition-colors ${pageParam >= totalPages 
                                    ? 'text-gray-400 cursor-not-allowed' 
                                    : 'text-purple-600 hover:bg-purple-50'}`}
                                disabled={pageParam >= totalPages}
                                data-page={pageParam + 1}
                            >
                                Siguiente →
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </section>
    </main>
    
    <script is:inline>
        // Función para manejar la navegación de la paginación
        function handlePagination(event, page) {
            event.preventDefault();
            const params = new URLSearchParams(window.location.search);
            params.set('page', page);
            window.location.href = `?${params.toString()}`;
        }

        // Función para limpiar todos los filtros
        function clearAllFilters() {
            window.location.search = '';
        }

        // Función para actualizar los filtros
        function updateFilters(type, value) {
            const params = new URLSearchParams(window.location.search);
            
            if (value) {
                params.set(type, value);
            } else {
                params.delete(type);
            }
            
            params.set('page', '1');
            window.location.href = `?${params.toString()}`;
        }

        // Función para manejar la búsqueda
        function handleSearch(event) {
            event.preventDefault();
            const searchInput = document.querySelector('#search-input');
            if (!searchInput) return;

            const params = new URLSearchParams(window.location.search);
            if (searchInput.value.trim()) {
                params.set('q', searchInput.value.trim());
            } else {
                params.delete('q');
            }
            
            params.set('page', '1');
            window.location.href = `?${params.toString()}`;
        }

        // Función para mostrar el loading state
        function showLoading() {
            const grid = document.querySelector('.grid');
            if (grid) {
                grid.style.opacity = '0.5';
            }
        }

        // Configurar los event listeners cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', () => {
            // Configurar listener para el formulario de búsqueda
            const searchForm = document.querySelector('#search-form');
            if (searchForm) {
                searchForm.addEventListener('submit', handleSearch);
            }

            // Configurar listeners para los filtros
            const orderSelect = document.querySelector('#order-select');
            if (orderSelect) {
                orderSelect.addEventListener('change', (e) => {
                    updateFilters('orderBy', e.target.value);
                });
            }

            const featuredCheckbox = document.querySelector('#featured-checkbox');
            if (featuredCheckbox) {
                featuredCheckbox.addEventListener('change', (e) => {
                    updateFilters('featured', e.target.checked ? 'true' : '');
                });
            }

            // Configurar listeners para los botones de paginación
            document.querySelectorAll('.pagination-button').forEach(button => {
                button.addEventListener('click', (e) => {
                    const page = button.dataset.page;
                    handlePagination(e, page);
                    showLoading();
                });
            });
        });
    </script>
</Layout>
